name: Build Docker Images (prod)

on:
  push:
    branches: [main]
    paths-ignore:
      - '.github/**'
      - 'README.md'

env:
  IMAGE_REGISTRY: 048663807102.dkr.ecr.ca-central-1.amazonaws.com

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v23.1
      - name: Set notification matrix
        id: matrix
        run: |
          echo "::set-output name=matrix::$(.github/bin/find-docker-files.py ${{ steps.changed-files.outputs.all_changed_files }})"

  build:
    environment: main
    needs:
      - setup
    runs-on: ubuntu-latest
    strategy:
      matrix: "${{ fromJson(needs.setup.outputs.matrix) }}"

    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Create ECR docker repository if needed
        run: |
          set -euo pipefail
          # Only take everything after the slash octocat/hello-world
          REPOSITORY=${{ matrix.base }}
          if ! aws ecr describe-repositories --repository-name="$REPOSITORY" > /dev/null 2>&1
          then
            echo "Creating $REPOSITORY"
            aws ecr create-repository --repository-name="$REPOSITORY" --image-scanning-configuration=scanOnPush=true --image-tag-mutability=IMMUTABLE
          else
            echo "$REPOSITORY already exists"
          fi

      - name: Ensure repository policy
        run: |
          REPOSITORY=${{ matrix.base }}
          aws ecr set-repository-policy --repository-name="${REPOSITORY}" --policy-text file://.github/policies/prod.json

      - name: Docker login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push
        id: docker-build
        uses: docker/build-push-action@v2
        with:
          context: "{{defaultContext}}:${{ matrix.base }}"
          push: true
          file: "Dockerfile"
          tags: |
            ${{ env.IMAGE_REGISTRY }}/${{ matrix.base }}:${{ github.sha }}
            ${{ env.IMAGE_REGISTRY }}/${{ matrix.base }}:${{ matrix.version }}
            ${{ env.IMAGE_REGISTRY }}/${{ matrix.base }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            git_version=${{ matrix.git_version }}
          secrets: |
            GIT_AUTH_TOKEN=${{ github.token }}

      - name: Extract and push binaries
        run: |
          CONTAINER="$(docker create ${{ matrix.base }}:${{ matrix.version }} ${{ matrix.base }})"
          BIN_TMP_DIR="/tmp/${{ matrix.base }}"
          mkdir -p "${BIN_TMP_DIR}"
          for FILE_NAME in ${{ matrix.manifest }}; do
            BASE_FILE_NAME="$(basename ${FILE_NAME})"
            docker cp ${CONTAINER}:${FILE_NAME} ${BIN_TMP_DIR}/${BASE_FILE_NAME}
            aws s3 cp --profile figment --acl public-read ${BIN_TMP_DIR}/${BASE_FILE_NAME} s3://figment-provisioning/${{ matrix.base }}/${{ matrix.version }}/${BASE_FILE_NAME}
          done
