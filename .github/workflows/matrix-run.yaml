name: Build images

on:
  pull_request:
    branches:
      - main
    paths-ignore:
      - '.github/**'
      - 'README.md'
  push:
    branches:
      - main
    paths-ignore:
      - '.github/**'
      - 'README.md'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v32
      - name: Set notification matrix
        id: matrix
        run: |
          echo "matrix=$(.github/bin/find-docker-files.py ${{ steps.changed-files.outputs.all_changed_files }})" >> $GITHUB_OUTPUT

  build:
    environment: main
    needs:
      - setup
    runs-on: "${{ matrix.runner }}"
    timeout-minutes: 240
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix: "${{ fromJson(needs.setup.outputs.matrix) }}"
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to DockerHub
        if: ${{ github.event_name == 'push' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set target tag default
        id: targettag
        run: |
          TARGET_TAG=${{ matrix.target }}
          if [ -z "$TARGET_TAG" ]; then
            export TARGET_TAG=target
          fi
          echo "value=${TARGET_TAG}" >> $GITHUB_OUTPUT
      - name: Set reference sha
        id: refsha
        run: |
          REF_SHA=${{ github.event.pull_request.base.sha }}
          if [ -z "$REF_SHA" ]; then
            export REF_SHA=${{ github.event.before }}
            if [ -z "$REF_SHA" ]; then
              export REF_SHA=${{ github.sha }}
            fi
          fi
          echo "value=${REF_SHA}" >> $GITHUB_OUTPUT
      - name: Build and push local
        id: docker_build_local
        uses: docker/build-push-action@v3
        if: ${{ github.event_name != 'push' }}
        with:
          context: "{{defaultContext}}:${{ matrix.base }}"
          push: true
          file: "Dockerfile"
          target: "${{ matrix.target }}"
          tags: |
            localhost:5000/${{ matrix.base }}:latest
          build-args: |
            git_version=${{ matrix.git_version }}
          cache-from: |
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ matrix.base }}:buildcache-${{ steps.targettag.outputs.value }}
          cache-to: |
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ matrix.base }}:buildcache-${{ steps.targettag.outputs.value }}-${{ steps.refsha.outputs.value }},mode=max
          secrets: |
            GIT_AUTH_TOKEN=${{ github.token }}
      - name: Build and push remote
        id: docker_build
        uses: docker/build-push-action@v3
        if: ${{ github.event_name == 'push' }}
        with:
          context: "{{defaultContext}}:${{ matrix.base }}"
          push: true
          file: "Dockerfile"
          target: "${{ matrix.target }}"
          tags: |
            localhost:5000/${{ matrix.base }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ matrix.base }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ matrix.base }}:${{ steps.targettag.outputs.value }}
            ghcr.io/${{ github.repository_owner }}/${{ matrix.base }}:${{ steps.targettag.outputs.value }}-${{ matrix.version }}
            cloudnull/${{ matrix.base }}:${{ steps.targettag.outputs.value }}
            cloudnull/${{ matrix.base }}:${{ steps.targettag.outputs.value }}-${{ matrix.version }}
            cloudnull/${{ matrix.base }}:${{ steps.refsha.outputs.value }}
            cloudnull/${{ matrix.base }}:${{ matrix.version }}
            cloudnull/${{ matrix.base }}:latest
          build-args: |
            git_version=${{ matrix.git_version }}
          cache-from: |
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ matrix.base }}:buildcache-${{ steps.targettag.outputs.value }}-${{ steps.refsha.outputs.value }}
          cache-to: |
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ matrix.base }}:buildcache-${{ steps.targettag.outputs.value }},mode=max
          secrets: |
            GIT_AUTH_TOKEN=${{ github.token }}
      - name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v3
        if: ${{ github.event_name == 'push' }}
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: cloudnull/${{ matrix.base }}
          readme-filepath: ${{ matrix.base }}/README.md
      - name: Extract and push binaries
        run: |
          CONTAINER="$(docker create localhost:5000/${{ matrix.base }}:latest ${{ matrix.base }})"
          BIN_TMP_DIR="/tmp/${{ matrix.base }}"
          mkdir -p "${BIN_TMP_DIR}"
          for FILE_NAME in ${{ matrix.manifest }}; do
            BASE_FILE_NAME="$(basename ${FILE_NAME})"
            docker cp ${CONTAINER}:${FILE_NAME} ${BIN_TMP_DIR}/${BASE_FILE_NAME}
            mkdir -p "/tmp/deb/$(dirname ${FILE_NAME})"
            cp -R ${BIN_TMP_DIR}/${BASE_FILE_NAME} /tmp/deb/${FILE_NAME}
          done
      - name: Upload binary artifacts
        if: ${{ github.event_name != 'push' }}
        uses: actions/upload-artifact@v2
        with:
          name: binary-artifacts-${{ matrix.base }}-${{ steps.targettag.outputs.value }}
          path: /tmp/${{ matrix.base }}*
      - name: Build deb
        id: deb_build
        run: |
          if [[ -d "/tmp/deb" ]]; then
            export DEBIAN_FRONTEND="noninteractive"
            sudo apt update && sudo apt install -y dpkg
            echo "value=$(dpkg --print-architecture)" >> $GITHUB_OUTPUT
            source /etc/os-release
            mkdir /tmp/packages
            docker run -t --volume /tmp/packages:/packages:rw \
                          --volume $(pwd)/.github/bin:/srv \
                          --volume /tmp/deb:/mnt:rw \
                          --env CONTAINER_TAG='${{ matrix.version }}' \
                          --env PROTOCOL_NAME='${{ matrix.base }}' \
                          cloudnull/base-dpkg:${VERSION_CODENAME} \
                          /srv/build-deb.sh
            find /tmp/deb
          fi
      - name: Upload packaging failure artifacts
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: deb-failure-artifacts-${{ matrix.base }}-${{ steps.targettag.outputs.value }}
          path: /tmp/deb/*
      - name: Upload deb artifacts
        uses: actions/upload-artifact@v2
        if: success() && steps.deb_build.outputs.value != ''
        with:
          name: deb-artifacts-${{ matrix.base }}-${{ steps.targettag.outputs.value }}
          path: /tmp/packages/*.deb

      # PUSH extracted binaries/deb to CDN
